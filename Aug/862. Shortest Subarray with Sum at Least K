// https://leetcode.com/submissions/detail/786560919/

class Solution {
    public int shortestSubarray(int[] nums, int k) {
        //Brute-force soln
        //two pointers fail :(
        
//         // at first the edge cases
//         if(nums.length==1 && nums[0]>= k) return 1;
//         else if(nums.length==1 && nums[0]< k) return -1;
        
//         //now taking min and updating it with each traversing of the newly created array
//         int minm = Integer.MAX_VALUE;
//         for(int i=0;i<nums.length;i++){
//             int sum =nums[i];
            
//             // if(sum >= k) return 1;
            
//             //taking another array of extra space O(N)
//             for(int j=i+1;j<nums.length;j++){
//                 sum+=nums[j];
//                 if(sum >=k) 
//                     minm=Math.min(minm,j-i+1);
//             }
//         }
//         return minm!=Integer.MAX_VALUE ? minm : -1;
        
        
        
        //with deque and prefix
        //The Deque is related to the double-ended queue that supports the addition or removal of elements from either end of the data structure.
        // 
        int l=nums.length;
        int res = l+1;
        
        Deque<Integer> q = new ArrayDeque<>();
        long prev[] = new long[l+1];
        
        for(int i=0;i<l;i++){
            prev[i+1]=nums[i]+prev[i]; // long +int error
            
        }
        //Deque functions :
        //getFirst() :returns the first element or the head of the Deque.this doesnt delete the element
        //pollFirst() : fetch and remove the first element of the Deque
        //pollLast() : fetch and remove the last element of the Deque
        //addLast(): add to the end of the Deque if there is space
        
        
        for(int i=0;i<l+1;i++){
            while(!q.isEmpty()&& prev[i]-prev[q.getFirst()]>=k) 
                res=Math.min(res,i-q.pollFirst()); 
            while(!q.isEmpty()&& prev[i]<=prev[q.getLast()])
                q.pollLast();
            q.addLast(i);
        }
        
        return res <= l? res:-1;
    }
}
