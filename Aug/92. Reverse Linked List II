https://leetcode.com/submissions/detail/765367838/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // 1->2->3->4->5
        // 1->* 2->3->4 *->5  --break the links and connect 2->5 and 4->1
        // 1->4->3->2->5
        
        if(head == null )return null;
        
        ListNode prev = null; // null->1->2->3->4->5
        ListNode curr = head; // starts w/ head =1
        
        // this loop ensures the starting node pf the reveesed linked list is correct
        while(left>1){
            prev = curr; 
            curr= curr.next;
            left--;   // left = 2, right = 4
            right--;
        }
        
        ListNode connect = prev,tail = curr;
        
        //simply reversing a linked list
        while(right>0){
            ListNode nextN = curr.next;
            curr.next = prev;
            prev=curr;
            curr=nextN;
            right--;
        }
        
        //connecting after reversing 4->3->2
        if(connect != null) connect.next=prev;
        else head = prev;
        
        tail.next = curr;
        
        return head;  
    }
}
