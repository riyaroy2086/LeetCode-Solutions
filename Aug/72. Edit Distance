// https://leetcode.com/submissions/detail/775779408/

class Solution {
    public int minDistance(String word1, String word2) {
        char w1[]= word1.toCharArray();
        char w2[]= word2.toCharArray();
        int n2=word1.length();
        int n1=word2.length();
        
        // the matrix 
        int dp[][] = new int[n2+1][n1+1];
        
        //first row framing
        for(int i=0;i<(n1+1);i++){
            dp[0][i]=i;
        }
        
        //the entire matrix framing
        // for 1st col 
        for(int i=1;i<(n2+1);i++){
            dp[i][0]=i;
            for(int j=1;j<(n1+1);j++){
                //IMP portion : the main logic
                //if equal
                // then continue
                if(w1[i-1]==w2[j-1])
                    dp[i][j]=dp[i-1][j-1]; // top left
                else{ // replace,insert,delete 
                    int rep=dp[i-1][j-1]; // rep w/ top left
                    int ins=dp[i-1][j]; // top
                    int del=dp[i][j-1]; // rt
                    
                    // now min nums of operations
                    dp[i][j]= Math.min(rep,Math.min(ins,del))+1;
                }
            }
        }
        return dp[n2][n1];
    }
}
