// https://leetcode.com/submissions/detail/788144866/

class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(board[i][j] == word.charAt(0) && dfs(i,j,0,word,board)) return true;
            }
        }return false; 
    }
    public boolean dfs(int i,int j,int c,String word,char[][] board){
        
        // the edge cases :
        if(c== word.length()) return true;
        //no unit out of the board is allowed
        if(i<0 || j< 0|| i>=board.length|| j>=board[i].length|| board[i][j] != word.charAt(c)) return false;
        
        char temp = board[i][j];
        board[i][j]= ' ';
        // traversing four sides && diagonal not allowed 
        boolean w = dfs(i+1,j,c+1,word,board) || dfs(i,j+1,c+1,word,board) || dfs(i-1,j,c+1,word,board)|| dfs(i,j-1,c+1,word,board);      
        board[i][j]= temp;
        return w;
    }
}

